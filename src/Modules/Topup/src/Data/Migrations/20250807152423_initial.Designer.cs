// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Topup.Data;

#nullable disable

namespace Topup.Data.Migrations
{
    [DbContext(typeof(TopupDbContext))]
    [Migration("20250807152423_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Topup.Topups.Models.Topup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Topup", (string)null);
                });

            modelBuilder.Entity("Topup.Topups.Models.Topup", b =>
                {
                    b.OwnsOne("Topup.Topups.ValueObjects.CreateByName", "CreateByName", b1 =>
                        {
                            b1.Property<Guid>("TopupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("CreateByName");

                            b1.HasKey("TopupId");

                            b1.ToTable("Topup");

                            b1.WithOwner()
                                .HasForeignKey("TopupId");
                        });

                    b.OwnsOne("Topup.Topups.ValueObjects.TransactionId", "TransactionId", b1 =>
                        {
                            b1.Property<Guid>("TopupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("TransactionId");

                            b1.HasKey("TopupId");

                            b1.ToTable("Topup");

                            b1.WithOwner()
                                .HasForeignKey("TopupId");
                        });

                    b.OwnsOne("Topup.Topups.ValueObjects.TransferAmount", "TransferAmount", b1 =>
                        {
                            b1.Property<Guid>("TopupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasMaxLength(10)
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TransferAmount");

                            b1.HasKey("TopupId");

                            b1.ToTable("Topup");

                            b1.WithOwner()
                                .HasForeignKey("TopupId");
                        });

                    b.Navigation("CreateByName")
                        .IsRequired();

                    b.Navigation("TransactionId")
                        .IsRequired();

                    b.Navigation("TransferAmount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
